// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_dense_array_ap_fixed_64u_array_ap_fixed_16_6_5_3_0_10u_config15_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer14_out_dout,
        layer14_out_num_data_valid,
        layer14_out_fifo_cap,
        layer14_out_empty_n,
        layer14_out_read,
        layer15_out_din,
        layer15_out_num_data_valid,
        layer15_out_fifo_cap,
        layer15_out_full_n,
        layer15_out_write
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [1023:0] layer14_out_dout;
input  [1:0] layer14_out_num_data_valid;
input  [1:0] layer14_out_fifo_cap;
input   layer14_out_empty_n;
output   layer14_out_read;
output  [159:0] layer15_out_din;
input  [1:0] layer15_out_num_data_valid;
input  [1:0] layer15_out_fifo_cap;
input   layer15_out_full_n;
output   layer15_out_write;

reg ap_done;
reg ap_idle;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer14_out_blk_n;
reg    layer15_out_blk_n;
wire    ap_CS_fsm_state11;
wire   [15:0] data_pack_fu_357_p1;
reg   [15:0] data_pack_reg_1046;
reg    ap_block_state1;
reg   [15:0] data_pack_64_reg_1051;
reg   [15:0] data_pack_65_reg_1056;
reg   [15:0] data_pack_66_reg_1061;
reg   [15:0] data_pack_67_reg_1066;
reg   [15:0] data_pack_68_reg_1071;
reg   [15:0] data_pack_69_reg_1076;
reg   [15:0] data_pack_70_reg_1081;
reg   [15:0] data_pack_71_reg_1086;
reg   [15:0] data_pack_72_reg_1091;
reg   [15:0] data_pack_73_reg_1096;
reg   [15:0] data_pack_74_reg_1101;
reg   [15:0] data_pack_75_reg_1106;
reg   [15:0] data_pack_76_reg_1111;
reg   [15:0] data_pack_77_reg_1116;
reg   [15:0] data_pack_78_reg_1121;
reg   [15:0] data_pack_79_reg_1126;
reg   [15:0] data_pack_80_reg_1131;
reg   [15:0] data_pack_81_reg_1136;
reg   [15:0] data_pack_82_reg_1141;
reg   [15:0] data_pack_83_reg_1146;
reg   [15:0] data_pack_84_reg_1151;
reg   [15:0] data_pack_85_reg_1156;
reg   [15:0] data_pack_86_reg_1161;
reg   [15:0] data_pack_87_reg_1166;
reg   [15:0] data_pack_88_reg_1171;
reg   [15:0] data_pack_89_reg_1176;
reg   [15:0] data_pack_90_reg_1181;
reg   [15:0] data_pack_91_reg_1186;
reg   [15:0] data_pack_92_reg_1191;
reg   [15:0] data_pack_93_reg_1196;
reg   [15:0] data_pack_94_reg_1201;
reg   [15:0] data_pack_95_reg_1206;
reg   [15:0] data_pack_96_reg_1211;
reg   [15:0] data_pack_97_reg_1216;
reg   [15:0] data_pack_98_reg_1221;
reg   [15:0] data_pack_99_reg_1226;
reg   [15:0] data_pack_100_reg_1231;
reg   [15:0] data_pack_101_reg_1236;
reg   [15:0] data_pack_102_reg_1241;
reg   [15:0] data_pack_103_reg_1246;
reg   [15:0] data_pack_104_reg_1251;
reg   [15:0] data_pack_105_reg_1256;
reg   [15:0] data_pack_106_reg_1261;
reg   [15:0] data_pack_107_reg_1266;
reg   [15:0] data_pack_108_reg_1271;
reg   [15:0] data_pack_109_reg_1276;
reg   [15:0] data_pack_110_reg_1281;
reg   [15:0] data_pack_111_reg_1286;
reg   [15:0] data_pack_112_reg_1291;
reg   [15:0] data_pack_113_reg_1296;
reg   [15:0] data_pack_114_reg_1301;
reg   [15:0] data_pack_115_reg_1306;
reg   [15:0] data_pack_116_reg_1311;
reg   [15:0] data_pack_117_reg_1316;
reg   [15:0] data_pack_118_reg_1321;
reg   [15:0] data_pack_119_reg_1326;
reg   [15:0] data_pack_120_reg_1331;
reg   [15:0] data_pack_121_reg_1336;
reg   [15:0] data_pack_122_reg_1341;
reg   [15:0] data_pack_123_reg_1346;
reg   [15:0] data_pack_124_reg_1351;
reg   [15:0] data_pack_125_reg_1356;
reg   [15:0] data_pack_126_reg_1361;
reg   [15:0] res_reg_1366;
wire    ap_CS_fsm_state10;
reg   [15:0] res_136_reg_1371;
reg   [15:0] res_137_reg_1376;
reg   [15:0] res_138_reg_1381;
reg   [15:0] res_139_reg_1386;
reg   [15:0] res_140_reg_1391;
reg   [15:0] res_141_reg_1396;
reg   [15:0] res_142_reg_1401;
reg   [15:0] res_143_reg_1406;
reg   [15:0] res_144_reg_1411;
wire   [15:0] grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_0;
wire   [15:0] grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_1;
wire   [15:0] grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_2;
wire   [15:0] grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_3;
wire   [15:0] grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_4;
wire   [15:0] grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_5;
wire   [15:0] grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_6;
wire   [15:0] grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_7;
wire   [15:0] grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_8;
wire   [15:0] grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_9;
wire    ap_CS_fsm_state2;
reg    layer14_out_read_local;
wire   [159:0] p_s_fu_1031_p11;
reg    layer15_out_write_local;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
end

myproject_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_0_val1(data_pack_reg_1046),
    .data_1_val2(data_pack_64_reg_1051),
    .data_2_val3(data_pack_65_reg_1056),
    .data_3_val4(data_pack_66_reg_1061),
    .data_4_val5(data_pack_67_reg_1066),
    .data_5_val6(data_pack_68_reg_1071),
    .data_6_val7(data_pack_69_reg_1076),
    .data_7_val8(data_pack_70_reg_1081),
    .data_8_val9(data_pack_71_reg_1086),
    .data_9_val10(data_pack_72_reg_1091),
    .data_10_val11(data_pack_73_reg_1096),
    .data_11_val12(data_pack_74_reg_1101),
    .data_12_val13(data_pack_75_reg_1106),
    .data_13_val14(data_pack_76_reg_1111),
    .data_14_val15(data_pack_77_reg_1116),
    .data_15_val16(data_pack_78_reg_1121),
    .data_16_val17(data_pack_79_reg_1126),
    .data_17_val18(data_pack_80_reg_1131),
    .data_18_val19(data_pack_81_reg_1136),
    .data_19_val20(data_pack_82_reg_1141),
    .data_20_val21(data_pack_83_reg_1146),
    .data_21_val22(data_pack_84_reg_1151),
    .data_22_val23(data_pack_85_reg_1156),
    .data_23_val24(data_pack_86_reg_1161),
    .data_24_val25(data_pack_87_reg_1166),
    .data_25_val26(data_pack_88_reg_1171),
    .data_26_val27(data_pack_89_reg_1176),
    .data_27_val28(data_pack_90_reg_1181),
    .data_28_val29(data_pack_91_reg_1186),
    .data_29_val30(data_pack_92_reg_1191),
    .data_30_val31(data_pack_93_reg_1196),
    .data_31_val32(data_pack_94_reg_1201),
    .data_32_val33(data_pack_95_reg_1206),
    .data_33_val34(data_pack_96_reg_1211),
    .data_34_val35(data_pack_97_reg_1216),
    .data_35_val36(data_pack_98_reg_1221),
    .data_36_val37(data_pack_99_reg_1226),
    .data_37_val38(data_pack_100_reg_1231),
    .data_38_val39(data_pack_101_reg_1236),
    .data_39_val40(data_pack_102_reg_1241),
    .data_40_val41(data_pack_103_reg_1246),
    .data_41_val42(data_pack_104_reg_1251),
    .data_42_val43(data_pack_105_reg_1256),
    .data_43_val44(data_pack_106_reg_1261),
    .data_44_val45(data_pack_107_reg_1266),
    .data_45_val46(data_pack_108_reg_1271),
    .data_46_val47(data_pack_109_reg_1276),
    .data_47_val48(data_pack_110_reg_1281),
    .data_48_val49(data_pack_111_reg_1286),
    .data_49_val50(data_pack_112_reg_1291),
    .data_50_val51(data_pack_113_reg_1296),
    .data_51_val52(data_pack_114_reg_1301),
    .data_52_val53(data_pack_115_reg_1306),
    .data_53_val54(data_pack_116_reg_1311),
    .data_54_val55(data_pack_117_reg_1316),
    .data_55_val56(data_pack_118_reg_1321),
    .data_56_val57(data_pack_119_reg_1326),
    .data_57_val58(data_pack_120_reg_1331),
    .data_58_val59(data_pack_121_reg_1336),
    .data_59_val60(data_pack_122_reg_1341),
    .data_60_val61(data_pack_123_reg_1346),
    .data_61_val62(data_pack_124_reg_1351),
    .data_62_val63(data_pack_125_reg_1356),
    .data_63_val64(data_pack_126_reg_1361),
    .ap_return_0(grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_0),
    .ap_return_1(grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_1),
    .ap_return_2(grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_2),
    .ap_return_3(grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_3),
    .ap_return_4(grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_4),
    .ap_return_5(grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_5),
    .ap_return_6(grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_6),
    .ap_return_7(grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_7),
    .ap_return_8(grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_8),
    .ap_return_9(grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_9)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((layer15_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_pack_100_reg_1231 <= {{layer14_out_dout[607:592]}};
        data_pack_101_reg_1236 <= {{layer14_out_dout[623:608]}};
        data_pack_102_reg_1241 <= {{layer14_out_dout[639:624]}};
        data_pack_103_reg_1246 <= {{layer14_out_dout[655:640]}};
        data_pack_104_reg_1251 <= {{layer14_out_dout[671:656]}};
        data_pack_105_reg_1256 <= {{layer14_out_dout[687:672]}};
        data_pack_106_reg_1261 <= {{layer14_out_dout[703:688]}};
        data_pack_107_reg_1266 <= {{layer14_out_dout[719:704]}};
        data_pack_108_reg_1271 <= {{layer14_out_dout[735:720]}};
        data_pack_109_reg_1276 <= {{layer14_out_dout[751:736]}};
        data_pack_110_reg_1281 <= {{layer14_out_dout[767:752]}};
        data_pack_111_reg_1286 <= {{layer14_out_dout[783:768]}};
        data_pack_112_reg_1291 <= {{layer14_out_dout[799:784]}};
        data_pack_113_reg_1296 <= {{layer14_out_dout[815:800]}};
        data_pack_114_reg_1301 <= {{layer14_out_dout[831:816]}};
        data_pack_115_reg_1306 <= {{layer14_out_dout[847:832]}};
        data_pack_116_reg_1311 <= {{layer14_out_dout[863:848]}};
        data_pack_117_reg_1316 <= {{layer14_out_dout[879:864]}};
        data_pack_118_reg_1321 <= {{layer14_out_dout[895:880]}};
        data_pack_119_reg_1326 <= {{layer14_out_dout[911:896]}};
        data_pack_120_reg_1331 <= {{layer14_out_dout[927:912]}};
        data_pack_121_reg_1336 <= {{layer14_out_dout[943:928]}};
        data_pack_122_reg_1341 <= {{layer14_out_dout[959:944]}};
        data_pack_123_reg_1346 <= {{layer14_out_dout[975:960]}};
        data_pack_124_reg_1351 <= {{layer14_out_dout[991:976]}};
        data_pack_125_reg_1356 <= {{layer14_out_dout[1007:992]}};
        data_pack_126_reg_1361 <= {{layer14_out_dout[1023:1008]}};
        data_pack_64_reg_1051 <= {{layer14_out_dout[31:16]}};
        data_pack_65_reg_1056 <= {{layer14_out_dout[47:32]}};
        data_pack_66_reg_1061 <= {{layer14_out_dout[63:48]}};
        data_pack_67_reg_1066 <= {{layer14_out_dout[79:64]}};
        data_pack_68_reg_1071 <= {{layer14_out_dout[95:80]}};
        data_pack_69_reg_1076 <= {{layer14_out_dout[111:96]}};
        data_pack_70_reg_1081 <= {{layer14_out_dout[127:112]}};
        data_pack_71_reg_1086 <= {{layer14_out_dout[143:128]}};
        data_pack_72_reg_1091 <= {{layer14_out_dout[159:144]}};
        data_pack_73_reg_1096 <= {{layer14_out_dout[175:160]}};
        data_pack_74_reg_1101 <= {{layer14_out_dout[191:176]}};
        data_pack_75_reg_1106 <= {{layer14_out_dout[207:192]}};
        data_pack_76_reg_1111 <= {{layer14_out_dout[223:208]}};
        data_pack_77_reg_1116 <= {{layer14_out_dout[239:224]}};
        data_pack_78_reg_1121 <= {{layer14_out_dout[255:240]}};
        data_pack_79_reg_1126 <= {{layer14_out_dout[271:256]}};
        data_pack_80_reg_1131 <= {{layer14_out_dout[287:272]}};
        data_pack_81_reg_1136 <= {{layer14_out_dout[303:288]}};
        data_pack_82_reg_1141 <= {{layer14_out_dout[319:304]}};
        data_pack_83_reg_1146 <= {{layer14_out_dout[335:320]}};
        data_pack_84_reg_1151 <= {{layer14_out_dout[351:336]}};
        data_pack_85_reg_1156 <= {{layer14_out_dout[367:352]}};
        data_pack_86_reg_1161 <= {{layer14_out_dout[383:368]}};
        data_pack_87_reg_1166 <= {{layer14_out_dout[399:384]}};
        data_pack_88_reg_1171 <= {{layer14_out_dout[415:400]}};
        data_pack_89_reg_1176 <= {{layer14_out_dout[431:416]}};
        data_pack_90_reg_1181 <= {{layer14_out_dout[447:432]}};
        data_pack_91_reg_1186 <= {{layer14_out_dout[463:448]}};
        data_pack_92_reg_1191 <= {{layer14_out_dout[479:464]}};
        data_pack_93_reg_1196 <= {{layer14_out_dout[495:480]}};
        data_pack_94_reg_1201 <= {{layer14_out_dout[511:496]}};
        data_pack_95_reg_1206 <= {{layer14_out_dout[527:512]}};
        data_pack_96_reg_1211 <= {{layer14_out_dout[543:528]}};
        data_pack_97_reg_1216 <= {{layer14_out_dout[559:544]}};
        data_pack_98_reg_1221 <= {{layer14_out_dout[575:560]}};
        data_pack_99_reg_1226 <= {{layer14_out_dout[591:576]}};
        data_pack_reg_1046 <= data_pack_fu_357_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        res_136_reg_1371 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_1;
        res_137_reg_1376 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_2;
        res_138_reg_1381 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_3;
        res_139_reg_1386 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_4;
        res_140_reg_1391 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_5;
        res_141_reg_1396 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_6;
        res_142_reg_1401 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_7;
        res_143_reg_1406 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_8;
        res_144_reg_1411 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_9;
        res_reg_1366 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((layer15_out_full_n == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((layer15_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((layer15_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer14_out_blk_n = layer14_out_empty_n;
    end else begin
        layer14_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer14_out_read_local = 1'b1;
    end else begin
        layer14_out_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        layer15_out_blk_n = layer15_out_full_n;
    end else begin
        layer15_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((layer15_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        layer15_out_write_local = 1'b1;
    end else begin
        layer15_out_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((layer15_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((layer14_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign data_pack_fu_357_p1 = layer14_out_dout[15:0];

assign layer14_out_read = layer14_out_read_local;

assign layer15_out_din = p_s_fu_1031_p11;

assign layer15_out_write = layer15_out_write_local;

assign p_s_fu_1031_p11 = {{{{{{{{{{res_144_reg_1411}, {res_143_reg_1406}}, {res_142_reg_1401}}, {res_141_reg_1396}}, {res_140_reg_1391}}, {res_139_reg_1386}}, {res_138_reg_1381}}, {res_137_reg_1376}}, {res_136_reg_1371}}, {res_reg_1366}};

assign start_out = real_start;

endmodule //myproject_dense_array_ap_fixed_64u_array_ap_fixed_16_6_5_3_0_10u_config15_s
