// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_32u_array_ap_fixed_16_6_5_3_0_32u_ReLU_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer2_out_dout,
        layer2_out_num_data_valid,
        layer2_out_fifo_cap,
        layer2_out_empty_n,
        layer2_out_read,
        layer5_out_din,
        layer5_out_num_data_valid,
        layer5_out_fifo_cap,
        layer5_out_full_n,
        layer5_out_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [511:0] layer2_out_dout;
input  [8:0] layer2_out_num_data_valid;
input  [8:0] layer2_out_fifo_cap;
input   layer2_out_empty_n;
output   layer2_out_read;
output  [511:0] layer5_out_din;
input  [8:0] layer5_out_num_data_valid;
input  [8:0] layer5_out_fifo_cap;
input   layer5_out_full_n;
output   layer5_out_write;
output   start_out;
output   start_write;

reg ap_idle;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln41_fu_1083_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    layer2_out_blk_n;
wire    ap_block_pp0_stage0;
reg    layer5_out_blk_n;
wire   [14:0] trunc_ln44_186_fu_261_p1;
reg   [14:0] trunc_ln44_186_reg_1490;
reg    ap_block_pp0_stage0_11001;
reg   [14:0] trunc_ln44_s_reg_1495;
reg   [14:0] trunc_ln44_153_reg_1500;
reg   [14:0] trunc_ln44_154_reg_1505;
reg   [14:0] trunc_ln44_155_reg_1510;
reg   [14:0] trunc_ln44_156_reg_1515;
reg   [14:0] trunc_ln44_157_reg_1520;
reg   [14:0] trunc_ln44_158_reg_1525;
reg   [14:0] trunc_ln44_159_reg_1530;
reg   [14:0] trunc_ln44_160_reg_1535;
reg   [14:0] trunc_ln44_161_reg_1540;
reg   [14:0] trunc_ln44_162_reg_1545;
reg   [14:0] trunc_ln44_163_reg_1550;
reg   [14:0] trunc_ln44_164_reg_1555;
reg   [14:0] trunc_ln44_165_reg_1560;
reg   [14:0] trunc_ln44_166_reg_1565;
reg   [14:0] trunc_ln44_167_reg_1570;
reg   [14:0] trunc_ln44_168_reg_1575;
reg   [14:0] trunc_ln44_169_reg_1580;
reg   [14:0] trunc_ln44_170_reg_1585;
reg   [14:0] trunc_ln44_171_reg_1590;
reg   [14:0] trunc_ln44_172_reg_1595;
reg   [14:0] trunc_ln44_173_reg_1600;
reg   [14:0] trunc_ln44_174_reg_1605;
reg   [14:0] trunc_ln44_175_reg_1610;
reg   [14:0] trunc_ln44_176_reg_1615;
reg   [14:0] trunc_ln44_177_reg_1620;
reg   [14:0] trunc_ln44_178_reg_1625;
reg   [14:0] trunc_ln44_179_reg_1630;
reg   [14:0] trunc_ln44_180_reg_1635;
reg   [14:0] trunc_ln44_181_reg_1640;
reg   [14:0] trunc_ln44_182_reg_1645;
wire   [0:0] icmp_ln51_fu_885_p2;
reg   [0:0] icmp_ln51_reg_1650;
wire   [0:0] icmp_ln51_95_fu_891_p2;
reg   [0:0] icmp_ln51_95_reg_1655;
wire   [0:0] icmp_ln51_96_fu_897_p2;
reg   [0:0] icmp_ln51_96_reg_1660;
wire   [0:0] icmp_ln51_97_fu_903_p2;
reg   [0:0] icmp_ln51_97_reg_1665;
wire   [0:0] icmp_ln51_98_fu_909_p2;
reg   [0:0] icmp_ln51_98_reg_1670;
wire   [0:0] icmp_ln51_99_fu_915_p2;
reg   [0:0] icmp_ln51_99_reg_1675;
wire   [0:0] icmp_ln51_100_fu_921_p2;
reg   [0:0] icmp_ln51_100_reg_1680;
wire   [0:0] icmp_ln51_101_fu_927_p2;
reg   [0:0] icmp_ln51_101_reg_1685;
wire   [0:0] icmp_ln51_102_fu_933_p2;
reg   [0:0] icmp_ln51_102_reg_1690;
wire   [0:0] icmp_ln51_103_fu_939_p2;
reg   [0:0] icmp_ln51_103_reg_1695;
wire   [0:0] icmp_ln51_104_fu_945_p2;
reg   [0:0] icmp_ln51_104_reg_1700;
wire   [0:0] icmp_ln51_105_fu_951_p2;
reg   [0:0] icmp_ln51_105_reg_1705;
wire   [0:0] icmp_ln51_106_fu_957_p2;
reg   [0:0] icmp_ln51_106_reg_1710;
wire   [0:0] icmp_ln51_107_fu_963_p2;
reg   [0:0] icmp_ln51_107_reg_1715;
wire   [0:0] icmp_ln51_108_fu_969_p2;
reg   [0:0] icmp_ln51_108_reg_1720;
wire   [0:0] icmp_ln51_109_fu_975_p2;
reg   [0:0] icmp_ln51_109_reg_1725;
wire   [0:0] icmp_ln51_110_fu_981_p2;
reg   [0:0] icmp_ln51_110_reg_1730;
wire   [0:0] icmp_ln51_111_fu_987_p2;
reg   [0:0] icmp_ln51_111_reg_1735;
wire   [0:0] icmp_ln51_112_fu_993_p2;
reg   [0:0] icmp_ln51_112_reg_1740;
wire   [0:0] icmp_ln51_113_fu_999_p2;
reg   [0:0] icmp_ln51_113_reg_1745;
wire   [0:0] icmp_ln51_114_fu_1005_p2;
reg   [0:0] icmp_ln51_114_reg_1750;
wire   [0:0] icmp_ln51_115_fu_1011_p2;
reg   [0:0] icmp_ln51_115_reg_1755;
wire   [0:0] icmp_ln51_116_fu_1017_p2;
reg   [0:0] icmp_ln51_116_reg_1760;
wire   [0:0] icmp_ln51_117_fu_1023_p2;
reg   [0:0] icmp_ln51_117_reg_1765;
wire   [0:0] icmp_ln51_118_fu_1029_p2;
reg   [0:0] icmp_ln51_118_reg_1770;
wire   [0:0] icmp_ln51_119_fu_1035_p2;
reg   [0:0] icmp_ln51_119_reg_1775;
wire   [0:0] icmp_ln51_120_fu_1041_p2;
reg   [0:0] icmp_ln51_120_reg_1780;
wire   [0:0] icmp_ln51_121_fu_1047_p2;
reg   [0:0] icmp_ln51_121_reg_1785;
wire   [0:0] icmp_ln51_122_fu_1053_p2;
reg   [0:0] icmp_ln51_122_reg_1790;
wire   [0:0] icmp_ln51_123_fu_1059_p2;
reg   [0:0] icmp_ln51_123_reg_1795;
wire   [0:0] icmp_ln51_124_fu_1065_p2;
reg   [0:0] icmp_ln51_124_reg_1800;
wire   [0:0] icmp_ln51_125_fu_1071_p2;
reg   [0:0] icmp_ln51_125_reg_1805;
reg   [7:0] i1_fu_232;
wire   [7:0] i_fu_1077_p2;
wire    ap_loop_init;
reg    layer2_out_read_local;
wire   [511:0] zext_ln57_fu_1478_p1;
reg    ap_block_pp0_stage0_01001;
reg    layer5_out_write_local;
wire   [15:0] in_data_fu_257_p1;
wire   [15:0] in_data_14_fu_265_p4;
wire   [15:0] in_data_15_fu_285_p4;
wire   [15:0] in_data_16_fu_305_p4;
wire   [15:0] trunc_ln44_98_fu_325_p4;
wire   [15:0] trunc_ln44_99_fu_345_p4;
wire   [15:0] trunc_ln44_100_fu_365_p4;
wire   [15:0] trunc_ln44_101_fu_385_p4;
wire   [15:0] trunc_ln44_102_fu_405_p4;
wire   [15:0] trunc_ln44_103_fu_425_p4;
wire   [15:0] trunc_ln44_104_fu_445_p4;
wire   [15:0] trunc_ln44_105_fu_465_p4;
wire   [15:0] trunc_ln44_106_fu_485_p4;
wire   [15:0] trunc_ln44_107_fu_505_p4;
wire   [15:0] trunc_ln44_108_fu_525_p4;
wire   [15:0] trunc_ln44_109_fu_545_p4;
wire   [15:0] trunc_ln44_110_fu_565_p4;
wire   [15:0] trunc_ln44_111_fu_585_p4;
wire   [15:0] trunc_ln44_112_fu_605_p4;
wire   [15:0] trunc_ln44_113_fu_625_p4;
wire   [15:0] trunc_ln44_114_fu_645_p4;
wire   [15:0] trunc_ln44_115_fu_665_p4;
wire   [15:0] trunc_ln44_116_fu_685_p4;
wire   [15:0] trunc_ln44_117_fu_705_p4;
wire   [15:0] trunc_ln44_118_fu_725_p4;
wire   [15:0] trunc_ln44_119_fu_745_p4;
wire   [15:0] trunc_ln44_120_fu_765_p4;
wire   [15:0] trunc_ln44_121_fu_785_p4;
wire   [15:0] trunc_ln44_122_fu_805_p4;
wire   [15:0] trunc_ln44_123_fu_825_p4;
wire   [15:0] trunc_ln44_124_fu_845_p4;
wire   [15:0] trunc_ln44_125_fu_865_p4;
wire   [14:0] out_data_15_fu_1094_p3;
wire   [14:0] out_data_17_fu_1104_p3;
wire   [14:0] out_data_19_fu_1114_p3;
wire   [14:0] out_data_21_fu_1124_p3;
wire   [14:0] select_ln51_fu_1134_p3;
wire   [14:0] select_ln51_87_fu_1144_p3;
wire   [14:0] select_ln51_88_fu_1154_p3;
wire   [14:0] select_ln51_89_fu_1164_p3;
wire   [14:0] select_ln51_90_fu_1174_p3;
wire   [14:0] select_ln51_91_fu_1184_p3;
wire   [14:0] select_ln51_92_fu_1194_p3;
wire   [14:0] select_ln51_93_fu_1204_p3;
wire   [14:0] select_ln51_94_fu_1214_p3;
wire   [14:0] select_ln51_95_fu_1224_p3;
wire   [14:0] select_ln51_96_fu_1234_p3;
wire   [14:0] select_ln51_97_fu_1244_p3;
wire   [14:0] select_ln51_98_fu_1254_p3;
wire   [14:0] select_ln51_99_fu_1264_p3;
wire   [14:0] select_ln51_100_fu_1274_p3;
wire   [14:0] select_ln51_101_fu_1284_p3;
wire   [14:0] select_ln51_102_fu_1294_p3;
wire   [14:0] select_ln51_103_fu_1304_p3;
wire   [14:0] select_ln51_104_fu_1314_p3;
wire   [14:0] select_ln51_105_fu_1324_p3;
wire   [14:0] select_ln51_106_fu_1334_p3;
wire   [14:0] select_ln51_107_fu_1344_p3;
wire   [14:0] select_ln51_108_fu_1354_p3;
wire   [14:0] select_ln51_109_fu_1364_p3;
wire   [14:0] select_ln51_110_fu_1374_p3;
wire   [14:0] select_ln51_111_fu_1384_p3;
wire   [14:0] select_ln51_112_fu_1394_p3;
wire   [14:0] select_ln51_113_fu_1404_p3;
wire   [15:0] zext_ln51_110_fu_1400_p1;
wire   [15:0] zext_ln51_109_fu_1390_p1;
wire   [15:0] zext_ln51_108_fu_1380_p1;
wire   [15:0] zext_ln51_107_fu_1370_p1;
wire   [15:0] zext_ln51_106_fu_1360_p1;
wire   [15:0] zext_ln51_105_fu_1350_p1;
wire   [15:0] zext_ln51_104_fu_1340_p1;
wire   [15:0] zext_ln51_103_fu_1330_p1;
wire   [15:0] zext_ln51_102_fu_1320_p1;
wire   [15:0] zext_ln51_101_fu_1310_p1;
wire   [15:0] zext_ln51_100_fu_1300_p1;
wire   [15:0] zext_ln51_99_fu_1290_p1;
wire   [15:0] zext_ln51_98_fu_1280_p1;
wire   [15:0] zext_ln51_97_fu_1270_p1;
wire   [15:0] zext_ln51_96_fu_1260_p1;
wire   [15:0] zext_ln51_95_fu_1250_p1;
wire   [15:0] zext_ln51_94_fu_1240_p1;
wire   [15:0] zext_ln51_93_fu_1230_p1;
wire   [15:0] zext_ln51_92_fu_1220_p1;
wire   [15:0] zext_ln51_91_fu_1210_p1;
wire   [15:0] zext_ln51_90_fu_1200_p1;
wire   [15:0] zext_ln51_89_fu_1190_p1;
wire   [15:0] zext_ln51_88_fu_1180_p1;
wire   [15:0] zext_ln51_87_fu_1170_p1;
wire   [15:0] zext_ln51_86_fu_1160_p1;
wire   [15:0] zext_ln51_85_fu_1150_p1;
wire   [15:0] zext_ln51_fu_1140_p1;
wire   [15:0] zext_ln45_9_fu_1130_p1;
wire   [15:0] zext_ln45_8_fu_1120_p1;
wire   [15:0] zext_ln45_7_fu_1110_p1;
wire   [15:0] zext_ln45_fu_1100_p1;
wire   [510:0] or_ln57_s_fu_1410_p33;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 i1_fu_232 = 8'd0;
end

myproject_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1))) begin
            i1_fu_232 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i1_fu_232 <= i_fu_1077_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln51_100_reg_1680 <= icmp_ln51_100_fu_921_p2;
        icmp_ln51_101_reg_1685 <= icmp_ln51_101_fu_927_p2;
        icmp_ln51_102_reg_1690 <= icmp_ln51_102_fu_933_p2;
        icmp_ln51_103_reg_1695 <= icmp_ln51_103_fu_939_p2;
        icmp_ln51_104_reg_1700 <= icmp_ln51_104_fu_945_p2;
        icmp_ln51_105_reg_1705 <= icmp_ln51_105_fu_951_p2;
        icmp_ln51_106_reg_1710 <= icmp_ln51_106_fu_957_p2;
        icmp_ln51_107_reg_1715 <= icmp_ln51_107_fu_963_p2;
        icmp_ln51_108_reg_1720 <= icmp_ln51_108_fu_969_p2;
        icmp_ln51_109_reg_1725 <= icmp_ln51_109_fu_975_p2;
        icmp_ln51_110_reg_1730 <= icmp_ln51_110_fu_981_p2;
        icmp_ln51_111_reg_1735 <= icmp_ln51_111_fu_987_p2;
        icmp_ln51_112_reg_1740 <= icmp_ln51_112_fu_993_p2;
        icmp_ln51_113_reg_1745 <= icmp_ln51_113_fu_999_p2;
        icmp_ln51_114_reg_1750 <= icmp_ln51_114_fu_1005_p2;
        icmp_ln51_115_reg_1755 <= icmp_ln51_115_fu_1011_p2;
        icmp_ln51_116_reg_1760 <= icmp_ln51_116_fu_1017_p2;
        icmp_ln51_117_reg_1765 <= icmp_ln51_117_fu_1023_p2;
        icmp_ln51_118_reg_1770 <= icmp_ln51_118_fu_1029_p2;
        icmp_ln51_119_reg_1775 <= icmp_ln51_119_fu_1035_p2;
        icmp_ln51_120_reg_1780 <= icmp_ln51_120_fu_1041_p2;
        icmp_ln51_121_reg_1785 <= icmp_ln51_121_fu_1047_p2;
        icmp_ln51_122_reg_1790 <= icmp_ln51_122_fu_1053_p2;
        icmp_ln51_123_reg_1795 <= icmp_ln51_123_fu_1059_p2;
        icmp_ln51_124_reg_1800 <= icmp_ln51_124_fu_1065_p2;
        icmp_ln51_125_reg_1805 <= icmp_ln51_125_fu_1071_p2;
        icmp_ln51_95_reg_1655 <= icmp_ln51_95_fu_891_p2;
        icmp_ln51_96_reg_1660 <= icmp_ln51_96_fu_897_p2;
        icmp_ln51_97_reg_1665 <= icmp_ln51_97_fu_903_p2;
        icmp_ln51_98_reg_1670 <= icmp_ln51_98_fu_909_p2;
        icmp_ln51_99_reg_1675 <= icmp_ln51_99_fu_915_p2;
        icmp_ln51_reg_1650 <= icmp_ln51_fu_885_p2;
        trunc_ln44_153_reg_1500 <= {{layer2_out_dout[46:32]}};
        trunc_ln44_154_reg_1505 <= {{layer2_out_dout[62:48]}};
        trunc_ln44_155_reg_1510 <= {{layer2_out_dout[78:64]}};
        trunc_ln44_156_reg_1515 <= {{layer2_out_dout[94:80]}};
        trunc_ln44_157_reg_1520 <= {{layer2_out_dout[110:96]}};
        trunc_ln44_158_reg_1525 <= {{layer2_out_dout[126:112]}};
        trunc_ln44_159_reg_1530 <= {{layer2_out_dout[142:128]}};
        trunc_ln44_160_reg_1535 <= {{layer2_out_dout[158:144]}};
        trunc_ln44_161_reg_1540 <= {{layer2_out_dout[174:160]}};
        trunc_ln44_162_reg_1545 <= {{layer2_out_dout[190:176]}};
        trunc_ln44_163_reg_1550 <= {{layer2_out_dout[206:192]}};
        trunc_ln44_164_reg_1555 <= {{layer2_out_dout[222:208]}};
        trunc_ln44_165_reg_1560 <= {{layer2_out_dout[238:224]}};
        trunc_ln44_166_reg_1565 <= {{layer2_out_dout[254:240]}};
        trunc_ln44_167_reg_1570 <= {{layer2_out_dout[270:256]}};
        trunc_ln44_168_reg_1575 <= {{layer2_out_dout[286:272]}};
        trunc_ln44_169_reg_1580 <= {{layer2_out_dout[302:288]}};
        trunc_ln44_170_reg_1585 <= {{layer2_out_dout[318:304]}};
        trunc_ln44_171_reg_1590 <= {{layer2_out_dout[334:320]}};
        trunc_ln44_172_reg_1595 <= {{layer2_out_dout[350:336]}};
        trunc_ln44_173_reg_1600 <= {{layer2_out_dout[366:352]}};
        trunc_ln44_174_reg_1605 <= {{layer2_out_dout[382:368]}};
        trunc_ln44_175_reg_1610 <= {{layer2_out_dout[398:384]}};
        trunc_ln44_176_reg_1615 <= {{layer2_out_dout[414:400]}};
        trunc_ln44_177_reg_1620 <= {{layer2_out_dout[430:416]}};
        trunc_ln44_178_reg_1625 <= {{layer2_out_dout[446:432]}};
        trunc_ln44_179_reg_1630 <= {{layer2_out_dout[462:448]}};
        trunc_ln44_180_reg_1635 <= {{layer2_out_dout[478:464]}};
        trunc_ln44_181_reg_1640 <= {{layer2_out_dout[494:480]}};
        trunc_ln44_182_reg_1645 <= {{layer2_out_dout[510:496]}};
        trunc_ln44_186_reg_1490 <= trunc_ln44_186_fu_261_p1;
        trunc_ln44_s_reg_1495 <= {{layer2_out_dout[30:16]}};
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_1083_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_out_blk_n = layer2_out_empty_n;
    end else begin
        layer2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_out_read_local = 1'b1;
    end else begin
        layer2_out_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer5_out_blk_n = layer5_out_full_n;
    end else begin
        layer5_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer5_out_write_local = 1'b1;
    end else begin
        layer5_out_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (layer2_out_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (layer5_out_full_n == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = internal_ap_ready;

assign i_fu_1077_p2 = (i1_fu_232 + 8'd1);

assign icmp_ln41_fu_1083_p2 = ((i1_fu_232 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln51_100_fu_921_p2 = (($signed(trunc_ln44_100_fu_365_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_101_fu_927_p2 = (($signed(trunc_ln44_101_fu_385_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_102_fu_933_p2 = (($signed(trunc_ln44_102_fu_405_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_103_fu_939_p2 = (($signed(trunc_ln44_103_fu_425_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_104_fu_945_p2 = (($signed(trunc_ln44_104_fu_445_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_105_fu_951_p2 = (($signed(trunc_ln44_105_fu_465_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_106_fu_957_p2 = (($signed(trunc_ln44_106_fu_485_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_107_fu_963_p2 = (($signed(trunc_ln44_107_fu_505_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_108_fu_969_p2 = (($signed(trunc_ln44_108_fu_525_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_109_fu_975_p2 = (($signed(trunc_ln44_109_fu_545_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_110_fu_981_p2 = (($signed(trunc_ln44_110_fu_565_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_111_fu_987_p2 = (($signed(trunc_ln44_111_fu_585_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_112_fu_993_p2 = (($signed(trunc_ln44_112_fu_605_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_113_fu_999_p2 = (($signed(trunc_ln44_113_fu_625_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_114_fu_1005_p2 = (($signed(trunc_ln44_114_fu_645_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_115_fu_1011_p2 = (($signed(trunc_ln44_115_fu_665_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_116_fu_1017_p2 = (($signed(trunc_ln44_116_fu_685_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_117_fu_1023_p2 = (($signed(trunc_ln44_117_fu_705_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_118_fu_1029_p2 = (($signed(trunc_ln44_118_fu_725_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_119_fu_1035_p2 = (($signed(trunc_ln44_119_fu_745_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_120_fu_1041_p2 = (($signed(trunc_ln44_120_fu_765_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_121_fu_1047_p2 = (($signed(trunc_ln44_121_fu_785_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_122_fu_1053_p2 = (($signed(trunc_ln44_122_fu_805_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_123_fu_1059_p2 = (($signed(trunc_ln44_123_fu_825_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_124_fu_1065_p2 = (($signed(trunc_ln44_124_fu_845_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_125_fu_1071_p2 = (($signed(trunc_ln44_125_fu_865_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_95_fu_891_p2 = (($signed(in_data_14_fu_265_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_96_fu_897_p2 = (($signed(in_data_15_fu_285_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_97_fu_903_p2 = (($signed(in_data_16_fu_305_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_98_fu_909_p2 = (($signed(trunc_ln44_98_fu_325_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_99_fu_915_p2 = (($signed(trunc_ln44_99_fu_345_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_885_p2 = (($signed(in_data_fu_257_p1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign in_data_14_fu_265_p4 = {{layer2_out_dout[31:16]}};

assign in_data_15_fu_285_p4 = {{layer2_out_dout[47:32]}};

assign in_data_16_fu_305_p4 = {{layer2_out_dout[63:48]}};

assign in_data_fu_257_p1 = layer2_out_dout[15:0];

assign layer2_out_read = layer2_out_read_local;

assign layer5_out_din = zext_ln57_fu_1478_p1;

assign layer5_out_write = layer5_out_write_local;

assign or_ln57_s_fu_1410_p33 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{select_ln51_113_fu_1404_p3}, {zext_ln51_110_fu_1400_p1}}, {zext_ln51_109_fu_1390_p1}}, {zext_ln51_108_fu_1380_p1}}, {zext_ln51_107_fu_1370_p1}}, {zext_ln51_106_fu_1360_p1}}, {zext_ln51_105_fu_1350_p1}}, {zext_ln51_104_fu_1340_p1}}, {zext_ln51_103_fu_1330_p1}}, {zext_ln51_102_fu_1320_p1}}, {zext_ln51_101_fu_1310_p1}}, {zext_ln51_100_fu_1300_p1}}, {zext_ln51_99_fu_1290_p1}}, {zext_ln51_98_fu_1280_p1}}, {zext_ln51_97_fu_1270_p1}}, {zext_ln51_96_fu_1260_p1}}, {zext_ln51_95_fu_1250_p1}}, {zext_ln51_94_fu_1240_p1}}, {zext_ln51_93_fu_1230_p1}}, {zext_ln51_92_fu_1220_p1}}, {zext_ln51_91_fu_1210_p1}}, {zext_ln51_90_fu_1200_p1}}, {zext_ln51_89_fu_1190_p1}}, {zext_ln51_88_fu_1180_p1}}, {zext_ln51_87_fu_1170_p1}}, {zext_ln51_86_fu_1160_p1}}, {zext_ln51_85_fu_1150_p1}}, {zext_ln51_fu_1140_p1}}, {zext_ln45_9_fu_1130_p1}}, {zext_ln45_8_fu_1120_p1}}, {zext_ln45_7_fu_1110_p1}}, {zext_ln45_fu_1100_p1}};

assign out_data_15_fu_1094_p3 = ((icmp_ln51_reg_1650[0:0] == 1'b1) ? trunc_ln44_186_reg_1490 : 15'd0);

assign out_data_17_fu_1104_p3 = ((icmp_ln51_95_reg_1655[0:0] == 1'b1) ? trunc_ln44_s_reg_1495 : 15'd0);

assign out_data_19_fu_1114_p3 = ((icmp_ln51_96_reg_1660[0:0] == 1'b1) ? trunc_ln44_153_reg_1500 : 15'd0);

assign out_data_21_fu_1124_p3 = ((icmp_ln51_97_reg_1665[0:0] == 1'b1) ? trunc_ln44_154_reg_1505 : 15'd0);

assign select_ln51_100_fu_1274_p3 = ((icmp_ln51_112_reg_1740[0:0] == 1'b1) ? trunc_ln44_169_reg_1580 : 15'd0);

assign select_ln51_101_fu_1284_p3 = ((icmp_ln51_113_reg_1745[0:0] == 1'b1) ? trunc_ln44_170_reg_1585 : 15'd0);

assign select_ln51_102_fu_1294_p3 = ((icmp_ln51_114_reg_1750[0:0] == 1'b1) ? trunc_ln44_171_reg_1590 : 15'd0);

assign select_ln51_103_fu_1304_p3 = ((icmp_ln51_115_reg_1755[0:0] == 1'b1) ? trunc_ln44_172_reg_1595 : 15'd0);

assign select_ln51_104_fu_1314_p3 = ((icmp_ln51_116_reg_1760[0:0] == 1'b1) ? trunc_ln44_173_reg_1600 : 15'd0);

assign select_ln51_105_fu_1324_p3 = ((icmp_ln51_117_reg_1765[0:0] == 1'b1) ? trunc_ln44_174_reg_1605 : 15'd0);

assign select_ln51_106_fu_1334_p3 = ((icmp_ln51_118_reg_1770[0:0] == 1'b1) ? trunc_ln44_175_reg_1610 : 15'd0);

assign select_ln51_107_fu_1344_p3 = ((icmp_ln51_119_reg_1775[0:0] == 1'b1) ? trunc_ln44_176_reg_1615 : 15'd0);

assign select_ln51_108_fu_1354_p3 = ((icmp_ln51_120_reg_1780[0:0] == 1'b1) ? trunc_ln44_177_reg_1620 : 15'd0);

assign select_ln51_109_fu_1364_p3 = ((icmp_ln51_121_reg_1785[0:0] == 1'b1) ? trunc_ln44_178_reg_1625 : 15'd0);

assign select_ln51_110_fu_1374_p3 = ((icmp_ln51_122_reg_1790[0:0] == 1'b1) ? trunc_ln44_179_reg_1630 : 15'd0);

assign select_ln51_111_fu_1384_p3 = ((icmp_ln51_123_reg_1795[0:0] == 1'b1) ? trunc_ln44_180_reg_1635 : 15'd0);

assign select_ln51_112_fu_1394_p3 = ((icmp_ln51_124_reg_1800[0:0] == 1'b1) ? trunc_ln44_181_reg_1640 : 15'd0);

assign select_ln51_113_fu_1404_p3 = ((icmp_ln51_125_reg_1805[0:0] == 1'b1) ? trunc_ln44_182_reg_1645 : 15'd0);

assign select_ln51_87_fu_1144_p3 = ((icmp_ln51_99_reg_1675[0:0] == 1'b1) ? trunc_ln44_156_reg_1515 : 15'd0);

assign select_ln51_88_fu_1154_p3 = ((icmp_ln51_100_reg_1680[0:0] == 1'b1) ? trunc_ln44_157_reg_1520 : 15'd0);

assign select_ln51_89_fu_1164_p3 = ((icmp_ln51_101_reg_1685[0:0] == 1'b1) ? trunc_ln44_158_reg_1525 : 15'd0);

assign select_ln51_90_fu_1174_p3 = ((icmp_ln51_102_reg_1690[0:0] == 1'b1) ? trunc_ln44_159_reg_1530 : 15'd0);

assign select_ln51_91_fu_1184_p3 = ((icmp_ln51_103_reg_1695[0:0] == 1'b1) ? trunc_ln44_160_reg_1535 : 15'd0);

assign select_ln51_92_fu_1194_p3 = ((icmp_ln51_104_reg_1700[0:0] == 1'b1) ? trunc_ln44_161_reg_1540 : 15'd0);

assign select_ln51_93_fu_1204_p3 = ((icmp_ln51_105_reg_1705[0:0] == 1'b1) ? trunc_ln44_162_reg_1545 : 15'd0);

assign select_ln51_94_fu_1214_p3 = ((icmp_ln51_106_reg_1710[0:0] == 1'b1) ? trunc_ln44_163_reg_1550 : 15'd0);

assign select_ln51_95_fu_1224_p3 = ((icmp_ln51_107_reg_1715[0:0] == 1'b1) ? trunc_ln44_164_reg_1555 : 15'd0);

assign select_ln51_96_fu_1234_p3 = ((icmp_ln51_108_reg_1720[0:0] == 1'b1) ? trunc_ln44_165_reg_1560 : 15'd0);

assign select_ln51_97_fu_1244_p3 = ((icmp_ln51_109_reg_1725[0:0] == 1'b1) ? trunc_ln44_166_reg_1565 : 15'd0);

assign select_ln51_98_fu_1254_p3 = ((icmp_ln51_110_reg_1730[0:0] == 1'b1) ? trunc_ln44_167_reg_1570 : 15'd0);

assign select_ln51_99_fu_1264_p3 = ((icmp_ln51_111_reg_1735[0:0] == 1'b1) ? trunc_ln44_168_reg_1575 : 15'd0);

assign select_ln51_fu_1134_p3 = ((icmp_ln51_98_reg_1670[0:0] == 1'b1) ? trunc_ln44_155_reg_1510 : 15'd0);

assign start_out = real_start;

assign trunc_ln44_100_fu_365_p4 = {{layer2_out_dout[111:96]}};

assign trunc_ln44_101_fu_385_p4 = {{layer2_out_dout[127:112]}};

assign trunc_ln44_102_fu_405_p4 = {{layer2_out_dout[143:128]}};

assign trunc_ln44_103_fu_425_p4 = {{layer2_out_dout[159:144]}};

assign trunc_ln44_104_fu_445_p4 = {{layer2_out_dout[175:160]}};

assign trunc_ln44_105_fu_465_p4 = {{layer2_out_dout[191:176]}};

assign trunc_ln44_106_fu_485_p4 = {{layer2_out_dout[207:192]}};

assign trunc_ln44_107_fu_505_p4 = {{layer2_out_dout[223:208]}};

assign trunc_ln44_108_fu_525_p4 = {{layer2_out_dout[239:224]}};

assign trunc_ln44_109_fu_545_p4 = {{layer2_out_dout[255:240]}};

assign trunc_ln44_110_fu_565_p4 = {{layer2_out_dout[271:256]}};

assign trunc_ln44_111_fu_585_p4 = {{layer2_out_dout[287:272]}};

assign trunc_ln44_112_fu_605_p4 = {{layer2_out_dout[303:288]}};

assign trunc_ln44_113_fu_625_p4 = {{layer2_out_dout[319:304]}};

assign trunc_ln44_114_fu_645_p4 = {{layer2_out_dout[335:320]}};

assign trunc_ln44_115_fu_665_p4 = {{layer2_out_dout[351:336]}};

assign trunc_ln44_116_fu_685_p4 = {{layer2_out_dout[367:352]}};

assign trunc_ln44_117_fu_705_p4 = {{layer2_out_dout[383:368]}};

assign trunc_ln44_118_fu_725_p4 = {{layer2_out_dout[399:384]}};

assign trunc_ln44_119_fu_745_p4 = {{layer2_out_dout[415:400]}};

assign trunc_ln44_120_fu_765_p4 = {{layer2_out_dout[431:416]}};

assign trunc_ln44_121_fu_785_p4 = {{layer2_out_dout[447:432]}};

assign trunc_ln44_122_fu_805_p4 = {{layer2_out_dout[463:448]}};

assign trunc_ln44_123_fu_825_p4 = {{layer2_out_dout[479:464]}};

assign trunc_ln44_124_fu_845_p4 = {{layer2_out_dout[495:480]}};

assign trunc_ln44_125_fu_865_p4 = {{layer2_out_dout[511:496]}};

assign trunc_ln44_186_fu_261_p1 = layer2_out_dout[14:0];

assign trunc_ln44_98_fu_325_p4 = {{layer2_out_dout[79:64]}};

assign trunc_ln44_99_fu_345_p4 = {{layer2_out_dout[95:80]}};

assign zext_ln45_7_fu_1110_p1 = out_data_17_fu_1104_p3;

assign zext_ln45_8_fu_1120_p1 = out_data_19_fu_1114_p3;

assign zext_ln45_9_fu_1130_p1 = out_data_21_fu_1124_p3;

assign zext_ln45_fu_1100_p1 = out_data_15_fu_1094_p3;

assign zext_ln51_100_fu_1300_p1 = select_ln51_102_fu_1294_p3;

assign zext_ln51_101_fu_1310_p1 = select_ln51_103_fu_1304_p3;

assign zext_ln51_102_fu_1320_p1 = select_ln51_104_fu_1314_p3;

assign zext_ln51_103_fu_1330_p1 = select_ln51_105_fu_1324_p3;

assign zext_ln51_104_fu_1340_p1 = select_ln51_106_fu_1334_p3;

assign zext_ln51_105_fu_1350_p1 = select_ln51_107_fu_1344_p3;

assign zext_ln51_106_fu_1360_p1 = select_ln51_108_fu_1354_p3;

assign zext_ln51_107_fu_1370_p1 = select_ln51_109_fu_1364_p3;

assign zext_ln51_108_fu_1380_p1 = select_ln51_110_fu_1374_p3;

assign zext_ln51_109_fu_1390_p1 = select_ln51_111_fu_1384_p3;

assign zext_ln51_110_fu_1400_p1 = select_ln51_112_fu_1394_p3;

assign zext_ln51_85_fu_1150_p1 = select_ln51_87_fu_1144_p3;

assign zext_ln51_86_fu_1160_p1 = select_ln51_88_fu_1154_p3;

assign zext_ln51_87_fu_1170_p1 = select_ln51_89_fu_1164_p3;

assign zext_ln51_88_fu_1180_p1 = select_ln51_90_fu_1174_p3;

assign zext_ln51_89_fu_1190_p1 = select_ln51_91_fu_1184_p3;

assign zext_ln51_90_fu_1200_p1 = select_ln51_92_fu_1194_p3;

assign zext_ln51_91_fu_1210_p1 = select_ln51_93_fu_1204_p3;

assign zext_ln51_92_fu_1220_p1 = select_ln51_94_fu_1214_p3;

assign zext_ln51_93_fu_1230_p1 = select_ln51_95_fu_1224_p3;

assign zext_ln51_94_fu_1240_p1 = select_ln51_96_fu_1234_p3;

assign zext_ln51_95_fu_1250_p1 = select_ln51_97_fu_1244_p3;

assign zext_ln51_96_fu_1260_p1 = select_ln51_98_fu_1254_p3;

assign zext_ln51_97_fu_1270_p1 = select_ln51_99_fu_1264_p3;

assign zext_ln51_98_fu_1280_p1 = select_ln51_100_fu_1274_p3;

assign zext_ln51_99_fu_1290_p1 = select_ln51_101_fu_1284_p3;

assign zext_ln51_fu_1140_p1 = select_ln51_fu_1134_p3;

assign zext_ln57_fu_1478_p1 = or_ln57_s_fu_1410_p33;

endmodule //myproject_relu_array_ap_fixed_32u_array_ap_fixed_16_6_5_3_0_32u_ReLU_config5_s
