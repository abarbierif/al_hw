-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_dense_array_ap_fixed_64u_array_ap_fixed_16_6_5_3_0_10u_config15_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer14_out_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
    layer14_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer14_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer14_out_empty_n : IN STD_LOGIC;
    layer14_out_read : OUT STD_LOGIC;
    layer15_out_din : OUT STD_LOGIC_VECTOR (159 downto 0);
    layer15_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_full_n : IN STD_LOGIC;
    layer15_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_dense_array_ap_fixed_64u_array_ap_fixed_16_6_5_3_0_10u_config15_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101111";
    constant ap_const_lv32_1B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001111";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101111";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_20F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001111";
    constant ap_const_lv32_210 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000010000";
    constant ap_const_lv32_21F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011111";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_22F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000101111";
    constant ap_const_lv32_230 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000110000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_24F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001001111";
    constant ap_const_lv32_250 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001010000";
    constant ap_const_lv32_25F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011111";
    constant ap_const_lv32_260 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100000";
    constant ap_const_lv32_26F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001101111";
    constant ap_const_lv32_270 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001110000";
    constant ap_const_lv32_27F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111111";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_28F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010001111";
    constant ap_const_lv32_290 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010010000";
    constant ap_const_lv32_29F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011111";
    constant ap_const_lv32_2A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010100000";
    constant ap_const_lv32_2AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010101111";
    constant ap_const_lv32_2B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010110000";
    constant ap_const_lv32_2BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010111111";
    constant ap_const_lv32_2C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011000000";
    constant ap_const_lv32_2CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011001111";
    constant ap_const_lv32_2D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011010000";
    constant ap_const_lv32_2DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011011111";
    constant ap_const_lv32_2E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011100000";
    constant ap_const_lv32_2EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011101111";
    constant ap_const_lv32_2F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011110000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv32_300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100000000";
    constant ap_const_lv32_30F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100001111";
    constant ap_const_lv32_310 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100010000";
    constant ap_const_lv32_31F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100011111";
    constant ap_const_lv32_320 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100100000";
    constant ap_const_lv32_32F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100101111";
    constant ap_const_lv32_330 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100110000";
    constant ap_const_lv32_33F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100111111";
    constant ap_const_lv32_340 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101000000";
    constant ap_const_lv32_34F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101001111";
    constant ap_const_lv32_350 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101010000";
    constant ap_const_lv32_35F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101011111";
    constant ap_const_lv32_360 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101100000";
    constant ap_const_lv32_36F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101101111";
    constant ap_const_lv32_370 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101110000";
    constant ap_const_lv32_37F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101111111";
    constant ap_const_lv32_380 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110000000";
    constant ap_const_lv32_38F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110001111";
    constant ap_const_lv32_390 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110010000";
    constant ap_const_lv32_39F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110011111";
    constant ap_const_lv32_3A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110100000";
    constant ap_const_lv32_3AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110101111";
    constant ap_const_lv32_3B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110110000";
    constant ap_const_lv32_3BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110111111";
    constant ap_const_lv32_3C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111000000";
    constant ap_const_lv32_3CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111001111";
    constant ap_const_lv32_3D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111010000";
    constant ap_const_lv32_3DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111011111";
    constant ap_const_lv32_3E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111100000";
    constant ap_const_lv32_3EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111101111";
    constant ap_const_lv32_3F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111110000";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer14_out_blk_n : STD_LOGIC;
    signal layer15_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal data_pack_fu_357_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_reg_1046 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal data_pack_64_reg_1051 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_65_reg_1056 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_66_reg_1061 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_67_reg_1066 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_68_reg_1071 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_69_reg_1076 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_70_reg_1081 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_71_reg_1086 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_72_reg_1091 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_73_reg_1096 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_74_reg_1101 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_75_reg_1106 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_76_reg_1111 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_77_reg_1116 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_78_reg_1121 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_79_reg_1126 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_80_reg_1131 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_81_reg_1136 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_82_reg_1141 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_83_reg_1146 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_84_reg_1151 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_85_reg_1156 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_86_reg_1161 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_87_reg_1166 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_88_reg_1171 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_89_reg_1176 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_90_reg_1181 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_91_reg_1186 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_92_reg_1191 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_93_reg_1196 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_94_reg_1201 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_95_reg_1206 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_96_reg_1211 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_97_reg_1216 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_98_reg_1221 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_99_reg_1226 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_100_reg_1231 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_101_reg_1236 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_102_reg_1241 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_103_reg_1246 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_104_reg_1251 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_105_reg_1256 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_106_reg_1261 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_107_reg_1266 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_108_reg_1271 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_109_reg_1276 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_110_reg_1281 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_111_reg_1286 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_112_reg_1291 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_113_reg_1296 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_114_reg_1301 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_115_reg_1306 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_116_reg_1311 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_117_reg_1316 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_118_reg_1321 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_119_reg_1326 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_120_reg_1331 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_121_reg_1336 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_122_reg_1341 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_123_reg_1346 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_124_reg_1351 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_125_reg_1356 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_pack_126_reg_1361 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_reg_1366 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal res_136_reg_1371 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_137_reg_1376 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_138_reg_1381 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_139_reg_1386 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_140_reg_1391 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_141_reg_1396 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_142_reg_1401 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_143_reg_1406 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_144_reg_1411 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal layer14_out_read_local : STD_LOGIC;
    signal p_s_fu_1031_p11 : STD_LOGIC_VECTOR (159 downto 0);
    signal layer15_out_write_local : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_0_val1 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_val2 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_val3 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_val4 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_4_val5 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_val6 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_6_val7 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_7_val8 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_8_val9 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_9_val10 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_10_val11 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_11_val12 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_12_val13 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_13_val14 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_14_val15 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_15_val16 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_16_val17 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_17_val18 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_18_val19 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_19_val20 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_20_val21 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_21_val22 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_22_val23 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_23_val24 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_24_val25 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_25_val26 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_26_val27 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_27_val28 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_28_val29 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_29_val30 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_30_val31 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_31_val32 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_32_val33 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_33_val34 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_34_val35 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_35_val36 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_36_val37 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_37_val38 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_38_val39 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_39_val40 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_40_val41 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_41_val42 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_42_val43 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_43_val44 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_44_val45 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_45_val46 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_46_val47 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_47_val48 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_48_val49 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_49_val50 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_50_val51 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_51_val52 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_52_val53 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_53_val54 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_54_val55 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_55_val56 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_56_val57 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_57_val58 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_58_val59 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_59_val60 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_60_val61 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_61_val62 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_62_val63 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_63_val64 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289 : component myproject_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_0_val1 => data_pack_reg_1046,
        data_1_val2 => data_pack_64_reg_1051,
        data_2_val3 => data_pack_65_reg_1056,
        data_3_val4 => data_pack_66_reg_1061,
        data_4_val5 => data_pack_67_reg_1066,
        data_5_val6 => data_pack_68_reg_1071,
        data_6_val7 => data_pack_69_reg_1076,
        data_7_val8 => data_pack_70_reg_1081,
        data_8_val9 => data_pack_71_reg_1086,
        data_9_val10 => data_pack_72_reg_1091,
        data_10_val11 => data_pack_73_reg_1096,
        data_11_val12 => data_pack_74_reg_1101,
        data_12_val13 => data_pack_75_reg_1106,
        data_13_val14 => data_pack_76_reg_1111,
        data_14_val15 => data_pack_77_reg_1116,
        data_15_val16 => data_pack_78_reg_1121,
        data_16_val17 => data_pack_79_reg_1126,
        data_17_val18 => data_pack_80_reg_1131,
        data_18_val19 => data_pack_81_reg_1136,
        data_19_val20 => data_pack_82_reg_1141,
        data_20_val21 => data_pack_83_reg_1146,
        data_21_val22 => data_pack_84_reg_1151,
        data_22_val23 => data_pack_85_reg_1156,
        data_23_val24 => data_pack_86_reg_1161,
        data_24_val25 => data_pack_87_reg_1166,
        data_25_val26 => data_pack_88_reg_1171,
        data_26_val27 => data_pack_89_reg_1176,
        data_27_val28 => data_pack_90_reg_1181,
        data_28_val29 => data_pack_91_reg_1186,
        data_29_val30 => data_pack_92_reg_1191,
        data_30_val31 => data_pack_93_reg_1196,
        data_31_val32 => data_pack_94_reg_1201,
        data_32_val33 => data_pack_95_reg_1206,
        data_33_val34 => data_pack_96_reg_1211,
        data_34_val35 => data_pack_97_reg_1216,
        data_35_val36 => data_pack_98_reg_1221,
        data_36_val37 => data_pack_99_reg_1226,
        data_37_val38 => data_pack_100_reg_1231,
        data_38_val39 => data_pack_101_reg_1236,
        data_39_val40 => data_pack_102_reg_1241,
        data_40_val41 => data_pack_103_reg_1246,
        data_41_val42 => data_pack_104_reg_1251,
        data_42_val43 => data_pack_105_reg_1256,
        data_43_val44 => data_pack_106_reg_1261,
        data_44_val45 => data_pack_107_reg_1266,
        data_45_val46 => data_pack_108_reg_1271,
        data_46_val47 => data_pack_109_reg_1276,
        data_47_val48 => data_pack_110_reg_1281,
        data_48_val49 => data_pack_111_reg_1286,
        data_49_val50 => data_pack_112_reg_1291,
        data_50_val51 => data_pack_113_reg_1296,
        data_51_val52 => data_pack_114_reg_1301,
        data_52_val53 => data_pack_115_reg_1306,
        data_53_val54 => data_pack_116_reg_1311,
        data_54_val55 => data_pack_117_reg_1316,
        data_55_val56 => data_pack_118_reg_1321,
        data_56_val57 => data_pack_119_reg_1326,
        data_57_val58 => data_pack_120_reg_1331,
        data_58_val59 => data_pack_121_reg_1336,
        data_59_val60 => data_pack_122_reg_1341,
        data_60_val61 => data_pack_123_reg_1346,
        data_61_val62 => data_pack_124_reg_1351,
        data_62_val63 => data_pack_125_reg_1356,
        data_63_val64 => data_pack_126_reg_1361,
        ap_return_0 => grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_0,
        ap_return_1 => grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_1,
        ap_return_2 => grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_2,
        ap_return_3 => grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_3,
        ap_return_4 => grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_4,
        ap_return_5 => grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_5,
        ap_return_6 => grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_6,
        ap_return_7 => grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_7,
        ap_return_8 => grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_8,
        ap_return_9 => grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_9);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((layer15_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                data_pack_100_reg_1231 <= layer14_out_dout(607 downto 592);
                data_pack_101_reg_1236 <= layer14_out_dout(623 downto 608);
                data_pack_102_reg_1241 <= layer14_out_dout(639 downto 624);
                data_pack_103_reg_1246 <= layer14_out_dout(655 downto 640);
                data_pack_104_reg_1251 <= layer14_out_dout(671 downto 656);
                data_pack_105_reg_1256 <= layer14_out_dout(687 downto 672);
                data_pack_106_reg_1261 <= layer14_out_dout(703 downto 688);
                data_pack_107_reg_1266 <= layer14_out_dout(719 downto 704);
                data_pack_108_reg_1271 <= layer14_out_dout(735 downto 720);
                data_pack_109_reg_1276 <= layer14_out_dout(751 downto 736);
                data_pack_110_reg_1281 <= layer14_out_dout(767 downto 752);
                data_pack_111_reg_1286 <= layer14_out_dout(783 downto 768);
                data_pack_112_reg_1291 <= layer14_out_dout(799 downto 784);
                data_pack_113_reg_1296 <= layer14_out_dout(815 downto 800);
                data_pack_114_reg_1301 <= layer14_out_dout(831 downto 816);
                data_pack_115_reg_1306 <= layer14_out_dout(847 downto 832);
                data_pack_116_reg_1311 <= layer14_out_dout(863 downto 848);
                data_pack_117_reg_1316 <= layer14_out_dout(879 downto 864);
                data_pack_118_reg_1321 <= layer14_out_dout(895 downto 880);
                data_pack_119_reg_1326 <= layer14_out_dout(911 downto 896);
                data_pack_120_reg_1331 <= layer14_out_dout(927 downto 912);
                data_pack_121_reg_1336 <= layer14_out_dout(943 downto 928);
                data_pack_122_reg_1341 <= layer14_out_dout(959 downto 944);
                data_pack_123_reg_1346 <= layer14_out_dout(975 downto 960);
                data_pack_124_reg_1351 <= layer14_out_dout(991 downto 976);
                data_pack_125_reg_1356 <= layer14_out_dout(1007 downto 992);
                data_pack_126_reg_1361 <= layer14_out_dout(1023 downto 1008);
                data_pack_64_reg_1051 <= layer14_out_dout(31 downto 16);
                data_pack_65_reg_1056 <= layer14_out_dout(47 downto 32);
                data_pack_66_reg_1061 <= layer14_out_dout(63 downto 48);
                data_pack_67_reg_1066 <= layer14_out_dout(79 downto 64);
                data_pack_68_reg_1071 <= layer14_out_dout(95 downto 80);
                data_pack_69_reg_1076 <= layer14_out_dout(111 downto 96);
                data_pack_70_reg_1081 <= layer14_out_dout(127 downto 112);
                data_pack_71_reg_1086 <= layer14_out_dout(143 downto 128);
                data_pack_72_reg_1091 <= layer14_out_dout(159 downto 144);
                data_pack_73_reg_1096 <= layer14_out_dout(175 downto 160);
                data_pack_74_reg_1101 <= layer14_out_dout(191 downto 176);
                data_pack_75_reg_1106 <= layer14_out_dout(207 downto 192);
                data_pack_76_reg_1111 <= layer14_out_dout(223 downto 208);
                data_pack_77_reg_1116 <= layer14_out_dout(239 downto 224);
                data_pack_78_reg_1121 <= layer14_out_dout(255 downto 240);
                data_pack_79_reg_1126 <= layer14_out_dout(271 downto 256);
                data_pack_80_reg_1131 <= layer14_out_dout(287 downto 272);
                data_pack_81_reg_1136 <= layer14_out_dout(303 downto 288);
                data_pack_82_reg_1141 <= layer14_out_dout(319 downto 304);
                data_pack_83_reg_1146 <= layer14_out_dout(335 downto 320);
                data_pack_84_reg_1151 <= layer14_out_dout(351 downto 336);
                data_pack_85_reg_1156 <= layer14_out_dout(367 downto 352);
                data_pack_86_reg_1161 <= layer14_out_dout(383 downto 368);
                data_pack_87_reg_1166 <= layer14_out_dout(399 downto 384);
                data_pack_88_reg_1171 <= layer14_out_dout(415 downto 400);
                data_pack_89_reg_1176 <= layer14_out_dout(431 downto 416);
                data_pack_90_reg_1181 <= layer14_out_dout(447 downto 432);
                data_pack_91_reg_1186 <= layer14_out_dout(463 downto 448);
                data_pack_92_reg_1191 <= layer14_out_dout(479 downto 464);
                data_pack_93_reg_1196 <= layer14_out_dout(495 downto 480);
                data_pack_94_reg_1201 <= layer14_out_dout(511 downto 496);
                data_pack_95_reg_1206 <= layer14_out_dout(527 downto 512);
                data_pack_96_reg_1211 <= layer14_out_dout(543 downto 528);
                data_pack_97_reg_1216 <= layer14_out_dout(559 downto 544);
                data_pack_98_reg_1221 <= layer14_out_dout(575 downto 560);
                data_pack_99_reg_1226 <= layer14_out_dout(591 downto 576);
                data_pack_reg_1046 <= data_pack_fu_357_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                res_136_reg_1371 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_1;
                res_137_reg_1376 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_2;
                res_138_reg_1381 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_3;
                res_139_reg_1386 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_4;
                res_140_reg_1391 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_5;
                res_141_reg_1396 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_6;
                res_142_reg_1401 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_7;
                res_143_reg_1406 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_8;
                res_144_reg_1411 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_9;
                res_reg_1366 <= grp_dense_latency_wrapper_ap_fixed_ap_fixed_16_6_5_3_0_config15_s_fu_289_ap_return_0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, layer15_out_full_n, ap_CS_fsm_state11, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((layer15_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(layer15_out_full_n)
    begin
        if ((layer15_out_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer14_out_empty_n)
    begin
                ap_block_state1 <= ((layer14_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer15_out_full_n, ap_CS_fsm_state11)
    begin
        if (((layer15_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    data_pack_fu_357_p1 <= layer14_out_dout(16 - 1 downto 0);

    internal_ap_ready_assign_proc : process(layer15_out_full_n, ap_CS_fsm_state11)
    begin
        if (((layer15_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer14_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer14_out_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer14_out_blk_n <= layer14_out_empty_n;
        else 
            layer14_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer14_out_read <= layer14_out_read_local;

    layer14_out_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer14_out_read_local <= ap_const_logic_1;
        else 
            layer14_out_read_local <= ap_const_logic_0;
        end if; 
    end process;


    layer15_out_blk_n_assign_proc : process(layer15_out_full_n, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            layer15_out_blk_n <= layer15_out_full_n;
        else 
            layer15_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer15_out_din <= p_s_fu_1031_p11;
    layer15_out_write <= layer15_out_write_local;

    layer15_out_write_local_assign_proc : process(layer15_out_full_n, ap_CS_fsm_state11)
    begin
        if (((layer15_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            layer15_out_write_local <= ap_const_logic_1;
        else 
            layer15_out_write_local <= ap_const_logic_0;
        end if; 
    end process;

    p_s_fu_1031_p11 <= (((((((((res_144_reg_1411 & res_143_reg_1406) & res_142_reg_1401) & res_141_reg_1396) & res_140_reg_1391) & res_139_reg_1386) & res_138_reg_1381) & res_137_reg_1376) & res_136_reg_1371) & res_reg_1366);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
